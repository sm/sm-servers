#!/bin/sh

nginx_cli()
{
  trace_filter nginx || set -o xtrace
  typeset -g project project_user project_path force_flag edit_flag
  typeset -ga domains
  local _ignored_args _package_args _token index _count _domain __domain
  _ignored_args=()
  _package_args=( "$@" )
  _count=${#_package_args[@]}

  service initialize

  if variable is empty domains
  then domains=() ; fi

  for (( index=0 ; index < $_count ; index++ ))
  do
    _token="${_package_args[$index]}"

    case "${_token}" in
      (domain)
        _domain="${_package_args[$((++index))]}"
        _domain="${_domain//,/ }"
        if variable is empty _domain
        then
          error "$FUNCNAME: a domain must follow keyword 'domain'"
        fi
        for __domain in ${_domain}
        do
          if ! __sm.string.contains "${__domain}" "${domains[*]}"
          then
            domains+=( "${__domain}" )
          fi
        done
        ;;
      (project)
        project="${_package_args[$((++index))]}"
        if variable is empty project
        then
          error "$FUNCNAME: a project name must follow keyword 'project'"
        fi
        ;;
      (user)
        project_user="${_package_args[$((++index))]}"
        if variable is empty project_user
        then
          error "$FUNCNAME: a project user name must follow keyword 'user'"
        fi
        ;;
      (path)
        project_path="${_package_args[$((++index))]}"
        if variable is empty project_path
        then
          error "$FUNCNAME: a project path name must follow keyword 'path'"
        fi
        ;;
      (force)
        force_flag=1
        true $((++index))
        ;;
      (edit)
        edit_flag=1
        true $((++index))
        ;;
      *)
        _ignored_args+=("${_token}")
        ;;
    esac
  done

  nginx_initialize "${_ignored_args[@]}"
}

nginx_server_new_cli()
{
  trace_filter nginx || set -o xtrace
  if variable is empty project
  then
    array shift extension_args variable project
  fi

  true ${project:=$1}

  if variable is empty project
  then
    log fail "$FUNCNAME: project name must be given."
  fi

  nginx_cli
}

# Hook before package is configured
nginx_preconfigure()
{
  trace_filter nginx || set -o xtrace
  typeset -ga configure_flags config_dirs nginx_dirs nginx_files
  typeset -g master_pid service_binary

  # TODO: Allow overriding of these parameters via cli
  # These defaults may be overridden also by the nginx configuration files.
  configure_flags=(
  --prefix="${install_path}"
  --conf-path="${install_path}/etc/nginx/nginx.conf"
  --sbin-path="${install_path}/sbin/nginx"
  --pid-path="${install_path}/run/nginx.pid"
  --lock-path="${install_path}/run/nginx.lock"
  --http-client-body-temp-path="${install_path}/spool/client_body_temp"
  --http-proxy-temp-path="${install_path}/spool/proxy_temp"
  --http-fastcgi-temp-path="${install_path}/spool/fastcgi_temp"
  --http-log-path="${install_path}/log/access.log"
  --error-log-path="${install_path}/log/error.log"
  --with-http_ssl_module
  --with-http_stub_status_module
  )

  # if package is active pcre
  # then
  #   pcre=$(__sm.packages.active pcre)
  #   configure_flags+=( --with-pcre="${sm_path}/src/pcre-${pcre##*:}" )
  #   unset pcre
  # fi

  # if package is active zlib
  # then
  #   configure_flags+=( --with-zlib=${sm_path}/pkg/active )
  # fi

  # TODO: Add a CLI --imap flag
  # --with-imap
  # --with-imap_ssl_module
}

nginx_initialize()
{
  typeset -ga config_dirs nginx_dirs nginx_files service_flags
  typeset -g master_pid

  config_dirs=( conf servers users ssl )
  nginx_dirs=( log spool run lock etc/nginx tmp )
  nginx_files=(
  fastcgi.conf fastcgi.conf.default fastcgi_params
  fastcgi_params.default koi-utf koi-win mime.types mime.types.default
  nginx.conf.default scgi_params scgi_params.default uwsgi_params
  uwsgi_params.default win-utf
  )

  true ${edit_flag:=0} ${project_user:=${project}}

  master_pid="$(ps auxww | awk '/[n]ginx: master/{print $2}' | head -1)"
  service_flags=( -c "${service_config_path}/nginx.conf" )
}

# Hook after installation of nginx package
nginx_postinstall()
{
  trace_filter nginx || set -o xtrace

  if file exists "nginx.conf"
  then
    file move "nginx.conf" \
      to "${install_path}/etc/nginx/conf/nginx.conf.default" \
      from "${install_path}/etc/nginx"
  fi

  path enter "${install_path}"
  paths create "${nginx_dirs[@]}"

  path enter "${install_path}/etc/nginx"
  paths create "${config_dirs[@]}"

  # Cleanup default nginx install messy directory.
  files move "${nginx_files[@]}" \
    to "${install_path}/etc/nginx/conf" \
    from "${install_path}/etc/nginx"

  paths create "${install_path}/config" "${install_path}/etc/nginx/servers"
}

# Hook after activation of nginx package
nginx_postactivate()
{
  trace_filter nginx || set -o xtrace

  if user is not root
  then
    return 0
  fi

  if (( ${force_flag:=0} )) &&
    path exists "${service_config_path}"
  then
    path move \
      from "${service_config_path}" \
      to "${service_config_path}.${timestamp}"
  fi

  service setup # create user, etc... then calls nginx_service_setup

  if ! file exists "${service_config_path}/nginx.conf"
  then
    file link symbolic force \
      from "${install_path}/etc/nginx" \
      to "${service_config_path}"

    path enter "${service_config_path}"

    files remove "${nginx_files[@]}"
  fi

  file link symbolic force \
    from "${install_path}/sbin/nginx" \
    to "${active_path}/sbin/nginx"
}

nginx_service_setup()
{
  trace_filter nginx || set -o xtrace
  typeset templates template

  template install "nginx/nginx.conf" \
    to "${install_path}/etc/nginx/nginx.conf" \
    mode 0644 \
    owner "${service_user}" \
    with \
    modules_path "${modules_path}" \
    service "${service}" \
    service_user "${service_user}" \
    service_config_path "${service_config_path}" \
    service_pid_file "${service_pid_file}" \
    service_log_path "${service_log_path}"

  paths create "${install_path}/etc/nginx/health/"

  templates install "nginx/nginx.health" \
    to "${install_path}/etc/nginx/health/nginx.conf" \
    mode 0644 owner "${service_user}"

  # NOTE: This was the init.d script originally
  # templates install "nginx/init.d" \
  # to "${install_path}/etc/init.d/nginx" \
  #  mode 0755 owner "${service_user}"

  templates=( "mime.types" "proxy.conf" )

  for template in "${templates[@]}"
  do
    template install "nginx/${template}" \
      to "${install_path}/etc/nginx/conf/${template}" \
      mode 0644 \
      owner "${service_user}"
  done

  path enter "${install_path}"

  file replace \
    regexp "^user .*;$" \
    with "# No user line for non-root installs" \
    in "${install_path}/etc/nginx/nginx.conf"

  paths chown "${service_user}" recursively \
    "${nginx_dirs[@]}" "etc/nginx"
}

nginx_os_dependencies_install()
{
  trace_filter nginx || set -o xtrace
  warn "${action} is untested / unused thus far."

  if os is linux
  then
    if command exists pacman
    then
      pacman -S --noconfirm patch curl zlib pcre openssl make base-devel

    elif command exists apt-get
    then
      apt-get install build-essential openssl curl zlib1g zlib1g-dev libssl-dev libpcre3-dev

    elif command exists yum
    then
      yum install -y gcc-c++ patch zlib zlib-devel openssl openssl-devel pcre pcre-devel

    elif command exists emerge
    then
      log "TODO: Tell wayne how to install pcre, openssl and zlib dev headers on gentoo."

    else
      log "TODO: Install zlib openssl pcre via curl, complile install."
    fi
  elif os is darwin
  then
    release="( $(sw_vers -productName) )"
    log "Notes for ${system} $release for OSX be sure to have the latest XCode tools. "
  fi
  echo
}

